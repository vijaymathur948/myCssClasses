{"version":3,"sources":["logo.svg","actions/startAction.js","actions/stopAction.js","actions/rotateAction.js","Components/NewComponent.js","App.js","serviceWorker.js","initialState/initialState.js","reducer/rotateReducer.js","store/store.js","index.js"],"names":["module","exports","startAction","type","payload","stopAction","rotateAction","NewComponent","props","extract","length","groupingvalue","arr","Array","from","fill","resultArray","i","push","slice","useState","size","setSize","total","setTotal","setArr","useEffect","setInterval","dateTimeObj","Date","document","getElementById","innerHTML","bold","fontsize","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","onmousemove","e","clientX","clientY","className","id","Row","Form","Group","Label","Control","min","max","value","onChange","Number","target","placeholder","map","obj_1","index_1","key","obj_2","index_2","connect","state","dispatch","Boolean","window","location","hostname","match","initialState","rotating","rotateReducer","action","configureStore","createStore","ReactDOM","render","store","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f34d1560.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const startAction = {\r\n  type: \"rotate\",\r\n  payload: true,\r\n}\r\n","export const stopAction = {\r\n  type: \"rotate\",\r\n  payload: false,\r\n}\r\n","export const rotateAction = payload => {\r\n  return { type: \"rotate\", payload }\r\n}\r\n","import React, { useState, useEffect } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { startAction } from \"../actions/startAction\"\r\nimport { stopAction } from \"../actions/stopAction\"\r\nimport { rotateAction } from \"../actions/rotateAction\"\r\n\r\nimport { Row, Col, Form } from \"react-bootstrap\"\r\nimport \"./NewComponent.css\"\r\n\r\nconst mapStateToProps = state => {\r\n  return { ...state }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    stopAction: () => dispatch(stopAction),\r\n    startAction: () => dispatch(startAction),\r\n    rotateAction: payload => dispatch(rotateAction(payload)),\r\n  }\r\n}\r\nconst NewComponent = props => {\r\n  const extract = (length, groupingvalue) => {\r\n    if (length < 1 || groupingvalue < 1) return []\r\n\r\n    let arr = Array.from({ length: length }).fill(2)\r\n    let resultArray = []\r\n    var counter = 0\r\n    // total 20 size 3\r\n\r\n    for (let i = 0; i + groupingvalue <= arr.length; i = i + groupingvalue) {\r\n      resultArray.push(arr.slice(i, i + groupingvalue))\r\n\r\n      // counter++\r\n      // if (counter % 2 === 0) groupingvalue--\r\n      // else groupingvalue++\r\n    }\r\n\r\n    return resultArray\r\n  }\r\n  const [size, setSize] = useState(5)\r\n  const [total, setTotal] = useState(20)\r\n  const [arr, setArr] = useState(extract(total, size))\r\n  useEffect(() => {\r\n    if (total > 0 && total <= 100 && size > 0 && size <= 100) {\r\n      setArr(extract(total, size))\r\n    }\r\n  }, [total, size])\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      var dateTimeObj = new Date()\r\n      document.getElementById(\"date\").innerHTML =\r\n        \"Date: \".bold().fontsize(\"20\") +\r\n        dateTimeObj.getDate() +\r\n        \"-\" +\r\n        dateTimeObj.getMonth() +\r\n        \"-\" +\r\n        dateTimeObj.getFullYear() +\r\n        \"    Time: \".bold().fontsize(\"20\") +\r\n        dateTimeObj.getHours() +\r\n        \" hours \" +\r\n        dateTimeObj.getMinutes() +\r\n        \" minutes \" +\r\n        dateTimeObj.getSeconds() +\r\n        \" seconds \"\r\n      document.onmousemove = e => {\r\n        document.getElementById(\r\n          \"mouse\"\r\n        ).innerHTML = `Mouse Co-ordinates [${e.clientX},${e.clientY}]`\r\n      }\r\n    }, 1000)\r\n  }, [])\r\n  return (\r\n    <div>\r\n      <div className='header'>\r\n        <h2 id='date' />\r\n        <h2 id='mouse' />\r\n\r\n        <Row>\r\n          <Form>\r\n            <Form.Group>\r\n              <Form.Label>Enter Total Size</Form.Label>\r\n              <Form.Control\r\n                type='number'\r\n                min='1'\r\n                max='100'\r\n                value={total}\r\n                onChange={e => {\r\n                  setTotal(Number(e.target.value))\r\n                }}\r\n                placeholder='Enter Total Size'\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Enter Row Size</Form.Label>\r\n              <Form.Control\r\n                type='number'\r\n                min='1'\r\n                max='100'\r\n                placeholder='Enter Total Size'\r\n                value={size}\r\n                onChange={e => {\r\n                  setSize(Number(e.target.value))\r\n                }}\r\n              />\r\n            </Form.Group>\r\n          </Form>\r\n        </Row>\r\n      </div>\r\n      <hr />\r\n      {arr.map((obj_1, index_1) => {\r\n        return (\r\n          <div className='rows' key={index_1}>\r\n            {obj_1.map((obj_2, index_2) => {\r\n              return (\r\n                <div className='columns' key={index_2}>\r\n                  [{index_1 + 1},{index_2 + 1}]\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        )\r\n      })}\r\n\r\n      <hr />\r\n      <div className='footer'>\r\n        <p>Footer</p>\r\n      </div>\r\n      <hr />\r\n    </div>\r\n  )\r\n}\r\nexport default NewComponent\r\n","import React from \"react\"\nimport logo from \"./logo.svg\"\nimport \"./App.css\"\nimport { connect, useSelector, useDispatch, useStore } from \"react-redux\"\nimport { startAction } from \"./actions/startAction\"\nimport { stopAction } from \"./actions/stopAction\"\nimport { rotateAction } from \"./actions/rotateAction\"\nimport NewComponent from \"./Components/NewComponent\"\nimport Tabs from \"./Components/HorizontalTabs\"\n\nconst mapStateToProps = state => {\n  return { ...state }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    stopAction: () => dispatch(stopAction),\n    startAction: () => dispatch(startAction),\n    rotateAction: payload => dispatch(rotateAction(payload)),\n  }\n}\n\nfunction App(props) {\n  return (\n    <div className='App'>\n      <NewComponent />\n    </div>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const initialState = { rotating: true }\r\n","const rotateReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"rotate\":\r\n      return { rotating: action.payload }\r\n    default:\r\n      return { ...state }\r\n  }\r\n}\r\nexport default rotateReducer\r\n","import { initialState } from \"../initialState/initialState\"\r\nimport rotateReducer from \"../reducer/rotateReducer\"\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\"\r\n\r\nconst configureStore = () => {\r\n  return createStore(rotateReducer, initialState)\r\n}\r\nexport default configureStore\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { Provider } from \"react-redux\"\nimport configureStore from \"./store/store\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}